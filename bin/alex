#!/usr/bin/env node

/*
 *  Copyright 2018 Maxine Michalski <maxine@furfind.net>
 *
 *  This file is part of Alex.
 *
 *  Alex is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  Alex is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Alex.  If not, see <http://www.gnu.org/licenses/>.
 */

'use strict'

const Alex = require('../lib/alex');
const Logger = require('../lib/logger');
const System = require('../lib/system');
const path = require('path');
const config = require('config');

let port = parseInt(process.env.PORT) ||
  parseInt(config.get('communication.port')) || 3000;
let host = process.env.HOST || config.get('communication.host') || '127.0.0.1';

let [server, http] = require('../lib/server');

let logger = new Logger();
let system = new System();

logger.info('System booting up....');
logger.debug('Creating self...');
let alex = new Alex();
logger.debug(`My name is ${alex.name}.`);
logger.debug('Making my name known to others.');
process.title = alex.name;
logger.debug(`I'm known as ${process.title} on this system.`);
logger.debug('Running system diagnostic:');
logger.debug('  System information:');
logger.debug(`    CPU count: ${system.cpu.cores}`);
if (system.cpu_count <= 2) {
  logger.debug('Not much to do parallel here, but it has to do.');
}
logger.debug(`      Architecture: ${system.cpu.architecture}`);
if (system.architecture != 'x64') {
  logger.debug('      A little old, but I think this has to do...');
}
let sys_memory = Math.round(system.memory.total /
  Math.pow(2,30) * 10) / 10.0;
logger.debug(`    Total system memory: ${sys_memory} GB`);
let v8_memory = Math.round(system.memory.max_heap /
  Math.pow(2,30) * 10) / 10.0;
logger.debug(`    Available memory to me: ${v8_memory} GB`);
logger.debug(`    Platform: ${system.platform}`);
if (system.platform === 'windows') {
  logger.error('    Running on incompatible platform.');
  process.exit(1);
}
else {
  logger.debug(`    Running as user: ${system.user.name}`);
  if (!(system.user.name == 'alex' || system.user.name == 'al3x')) {
    logger.debug('    That user is not me for sure.');
  }
  if (system.user.id === 0) {
    logger.error('  I\'m running as root!');
    logger.error('  Privileges too high. Aborting!');
    logger.error('  Please only run me as a non-root user.');
    process.exit(1);
  }
}
logger.debug(`  My home is: ${system.hostname()}`);
logger.debug(`  Using interpreter: ${system.interpreter.node}`);
logger.debug(`  Spawned as program: ${system.interpreter.program}`);
if (system.program == 'alex') {
  logger.debug('  That\'s me!');
}
logger.info('Loading personalities.');
if (alex.personalities().length === 0) {
  logger.warn('  No personalities found.');
}
else {
  logger.info(`  Found ${alex.personalities().length} personalities.`);
}

logger.debug('Bootup finished. Starting server next.');

logger.info('Starting server.');

// Adding methods to the JSON-RPC server, which is the glue between server and
// Alex's core code
server.methods({pong: function (args, callback) {
  callback(null, 'ping');
}
});

/*server.on('train', function(data, conn) {
  alex.train(data).then( function () {
    conn.write(JSON.stringify({event: 'train',
      data: { user: data.user, message: 'done' }}));
  }, function (err) {
    logger.error(err.code);
    server.emit('error', err, conn);
  });
});

server.on('score', function(data, conn) {
  alex.score(data).then(function (scors) {
    conn.write(JSON.stringify({event: 'score',
      data: { user: data.user, scores: scores }}));
  }, function (err) {
    logger.error(err.code);
    server.emit('error', err, conn);
  });
});
*/

http.listen(port, host);

process.on('exit', function () {
  logger.info('Going back to snooze.');
});
